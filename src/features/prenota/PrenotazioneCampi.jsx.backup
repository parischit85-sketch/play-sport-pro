// =============================================
// FILE: src/features/prenota/PrenotazioneCampi.jsx
// =============================================
import React, { useEffect, useMemo, useRef, useState } from 'react';
import Section from '@ui/Section.jsx';
import Modal from '@ui/Modal.jsx';
import { euro, euro2 } from '@lib/format.js';
import { sameDay, floorToSlot, addMinutes, overlaps } from '@lib/date.js';
import { computePrice, getRateInfo } from '@lib/pricing.js';

// Componente calendario personalizzato
function CalendarGrid({ currentDay, onSelectDay, T }) {
  const [calendarMonth, setCalendarMonth] = useState(new Date(currentDay.getFullYear(), currentDay.getMonth(), 1));
  
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  
  const year = calendarMonth.getFullYear();
  const month = calendarMonth.getMonth();
  
  // Primo giorno del mese e ultimo giorno
  const firstDay = new Date(year, month, 1);
  const lastDay = new Date(year, month + 1, 0);
  
  // Giorni da mostrare (inclusi quelli del mese precedente/successivo per riempire la griglia)
  const startDate = new Date(firstDay);
  startDate.setDate(startDate.getDate() - firstDay.getDay() + 1); // Lunedì della prima settimana
  
  const endDate = new Date(startDate);
  endDate.setDate(endDate.getDate() + 41); // 6 settimane complete
  
  const days = [];
  for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
    days.push(new Date(d));
  }
  
  const monthNames = [
    'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',
    'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'
  ];
  
  const weekDays = ['Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab', 'Dom'];
  
  const goToPrevMonth = () => {
    setCalendarMonth(new Date(year, month - 1, 1));
  };
  
  const goToNextMonth = () => {
    setCalendarMonth(new Date(year, month + 1, 1));
  };
  
  const isToday = (day) => day.getTime() === today.getTime();
  const isSelected = (day) => day.getTime() === currentDay.getTime();
  const isCurrentMonth = (day) => day.getMonth() === month;
  const isPast = (day) => day < today;
  
  return (
    <div className="w-full">
      {/* Header del calendario */}
      <div className="flex items-center justify-between mb-4">
        <button
          type="button"
          onClick={goToPrevMonth}
          className={`w-10 h-10 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 flex items-center justify-center text-xl font-bold transition-colors`}
        >
          ←
        </button>
        <h4 className={`text-xl font-bold ${T.text}`}>
          {monthNames[month]} {year}
        </h4>
        <button
          type="button"
          onClick={goToNextMonth}
          className={`w-10 h-10 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 flex items-center justify-center text-xl font-bold transition-colors`}
        >
          →
        </button>
      </div>
      
      {/* Giorni della settimana */}
      <div className="grid grid-cols-7 gap-1 mb-2">
        {weekDays.map(day => (
          <div key={day} className={`text-center text-sm font-semibold ${T.subtext} py-2`}>
            {day}
          </div>
        ))}
      </div>
      
      {/* Griglia giorni */}
      <div className="grid grid-cols-7 gap-1">
        {days.map((day, index) => {
          const dayNum = day.getDate();
          const isCurrentMonthDay = isCurrentMonth(day);
          const isTodayDay = isToday(day);
          const isSelectedDay = isSelected(day);
          const isPastDay = isPast(day);
          
          return (
            <button
              key={index}
              type="button"
              onClick={() => onSelectDay(day)}
              disabled={isPastDay}
              className={`
                h-12 w-full rounded-lg text-sm font-medium transition-all duration-200
                ${isSelectedDay 
                  ? 'bg-blue-500 text-white shadow-lg dark:bg-emerald-500' 
                  : isTodayDay 
                    ? 'bg-blue-100 text-blue-700 border-2 border-blue-300 dark:bg-emerald-100 dark:text-emerald-700 dark:border-emerald-300'
                    : isCurrentMonthDay
                      ? 'hover:bg-gray-200 dark:hover:bg-gray-700 ' + T.text
                      : 'text-gray-400 dark:text-gray-600'
                }
                ${isPastDay ? 'opacity-50 cursor-not-allowed' : 'hover:scale-105'}
              `}
            >
              {dayNum}
            </button>
          );
        })}
      </div>
    </div>
  );
}

export default function PrenotazioneCampi({ state, setState, players, playersById, T }) {
  // Safe access to bookingConfig with fallback
  const cfg = state?.bookingConfig || { 
    slotMinutes: 30, 
    dayStartHour: 8, 
    dayEndHour: 23, 
    defaultDurations: [60, 90, 120],
    addons: {}
  };
  
  const [day, setDay] = useState(() => floorToSlot(new Date(), cfg.slotMinutes));
  const [showDatePicker, setShowDatePicker] = useState(false);
  const courts = Array.isArray(state?.courts) ? state.courts : [];
  const bookings = Array.isArray(state?.bookings) ? state.bookings : [];

  // Default duration for new bookings: prefer 90' if available, otherwise first configured or 90'
  const defaultDuration = useMemo(() => {
    const list = Array.isArray(cfg?.defaultDurations) ? cfg.defaultDurations : [];
    if (list.includes(90)) return 90;
    if (list.length > 0) return list[0];
    return 90;
  }, [cfg]);

  const goToday = () => setDay(floorToSlot(new Date(), cfg.slotMinutes));
  const goOffset = (days) =>
    setDay((d) => {
      const nd = new Date(d);
      nd.setDate(nd.getDate() + days);
      return nd;
    });
  const setDayFromInput = (value) => {
    const [y, m, dd] = value.split('-').map(Number);
    const d = new Date(day);
    d.setFullYear(y);
    d.setMonth(m - 1);
    d.setDate(dd);
    d.setHours(0, 0, 0, 0);
    setDay(d);
  };

  const dayStart = new Date(day);
  dayStart.setHours(cfg.dayStartHour, 0, 0, 0);
  const dayEnd = new Date(day);
  dayEnd.setHours(cfg.dayEndHour, 0, 0, 0);

  // Genera time slots considerando tutti i campi e i loro time slots specifici
  const timeSlots = [];
  const allCourtTimeSlots = new Set();
  
  // Raccoglie tutti i time slots definiti nei campi
  courts.forEach(court => {
    if (court.timeSlots && court.timeSlots.length > 0) {
      court.timeSlots.forEach(slot => {
        if (slot.days?.includes(day.getDay())) {
          // Converte orari in minuti per il confronto
          const fromMinutes = parseInt(slot.from.split(':')[0]) * 60 + parseInt(slot.from.split(':')[1]);
          const toMinutes = parseInt(slot.to.split(':')[0]) * 60 + parseInt(slot.to.split(':')[1]);
          
          // Aggiunge tutti gli slot nell'intervallo
          for (let minutes = fromMinutes; minutes < toMinutes; minutes += cfg.slotMinutes) {
            allCourtTimeSlots.add(minutes);
          }
        }
      });
    }
  });
  
  // Se ci sono time slots per-campo, usali; altrimenti fallback al sistema globale
  if (allCourtTimeSlots.size > 0) {
    const sortedMinutes = Array.from(allCourtTimeSlots).sort((a, b) => a - b);
    sortedMinutes.forEach(minutes => {
      const slotTime = new Date(day);
      slotTime.setHours(Math.floor(minutes / 60), minutes % 60, 0, 0);
      timeSlots.push(slotTime);
    });
  } else {
    // Fallback al sistema globale quando nessun campo ha time slots configurati
    for (let t = new Date(dayStart); t < dayEnd; t = addMinutes(t, cfg.slotMinutes)) {
      timeSlots.push(new Date(t));
    }
  }

  const cap = (s) => s.charAt(0).toUpperCase() + s.slice(1);
  const dayLabel = `${cap(new Intl.DateTimeFormat('it-IT', { weekday: 'long' }).format(day))} - ${String(
    day.getDate()
  ).padStart(2, '0')} ${new Intl.DateTimeFormat('it-IT', { month: 'long' }).format(day)} ${day.getFullYear()}`;

  const dayBookings = useMemo(
    () =>
      bookings
        .filter((b) => sameDay(new Date(b.start), day))
        .sort((a, b) => new Date(a.start) - new Date(b.start)),
    [bookings, day]
  );

  const bookingsByCourt = useMemo(() => {
    const map = new Map(courts.map((c) => [c.id, []]));
    for (const b of dayBookings) {
      const arr = map.get(b.courtId) || [];
      arr.push(b);
      map.set(b.courtId, arr);
    }
    return map;
  }, [dayBookings, courts]);

  const dayRates = useMemo(() => {
    // Calcola rates considerando tutti i campi per ogni time slot
    return timeSlots.map((t) => {
      const courtRates = courts.map(court => getRateInfo(t, cfg, court.id, courts).rate);
      // Ritorna il rate minimo, massimo o medio tra i campi
      return courtRates.length > 0 ? Math.min(...courtRates) : 0;
    });
  }, [timeSlots, cfg, courts]);
  const minRate = useMemo(() => Math.min(...dayRates), [dayRates]);
  const maxRate = useMemo(() => Math.max(...dayRates), [dayRates]);
  const greenAlphaForRate = (rate) => {
    if (!isFinite(minRate) || !isFinite(maxRate) || minRate === maxRate) return 0.18;
    const x = (rate - minRate) / (maxRate - minRate);
    return 0.12 + x * 0.22;
  };

  const playersAlpha = useMemo(
    () => [...players].sort((a, b) => (a.name || '').localeCompare(b.name, 'it', { sensitivity: 'base' })),
    [players]
  );
  const playersNameById = (id) => playersById?.[id]?.name || '';
  const findPlayerIdByName = (name) => {
    const n = (name || '').trim().toLowerCase();
    if (!n) return null;
    const found = playersAlpha.find((p) => p.name.trim().toLowerCase() === n);
    return found?.id || null;
  };

  // Verifica se un campo ha una fascia promo attiva per un determinato orario
  const hasPromoSlot = (courtId, datetime) => {
    if (!datetime) return false;
    const info = getRateInfo(datetime, cfg, courtId, courts);
    return info.isPromo || false;
  };

  const [modalOpen, setModalOpen] = useState(false);
  const [editingId, setEditingId] = useState(null);
  const [form, setForm] = useState({
    courtId: '',
    start: null,
  duration: defaultDuration,
    p1Name: '',
    p2Name: '',
    p3Name: '',
    p4Name: '',
    note: '',
    bookedBy: '',
    useLighting: false,
    useHeating: false,
  });

  function openCreate(courtId, start) {
    const startRounded = floorToSlot(start, cfg.slotMinutes);
    setEditingId(null);
    setForm({
      courtId,
      start: startRounded,
  duration: defaultDuration,
      p1Name: '',
      p2Name: '',
      p3Name: '',
      p4Name: '',
      note: '',
      bookedBy: '',
      useLighting: false,
      useHeating: false,
    });
    setModalOpen(true);
  }

  function openEdit(booking) {
    setEditingId(booking.id);
    const start = new Date(booking.start);
    const namesFromIds = (booking.players || []).map(playersNameById);
    let playerNames = booking.playerNames && booking.playerNames.length ? booking.playerNames : namesFromIds;
    
    // Assicuriamoci che l'organizzatore sia incluso nell'elenco dei giocatori
    const organizerName = booking.bookedByName || '';
    if (organizerName && !playerNames.includes(organizerName)) {
      playerNames = [organizerName, ...playerNames].slice(0, 4); // Max 4 giocatori
    }
    
    setForm({
      courtId: booking.courtId,
      start,
      duration: booking.duration,
      p1Name: playerNames[0] || '',
      p2Name: playerNames[1] || '',
      p3Name: playerNames[2] || '',
      p4Name: playerNames[3] || '',
      note: booking.note || '',
      bookedBy: organizerName,
      useLighting: !!booking.addons?.lighting,
      useHeating: !!booking.addons?.heating,
    });
    setModalOpen(true);
  }

  function existingOverlap(courtId, start, duration, ignoreId = null) {
    const blockStart = new Date(start);
    const blockEnd = addMinutes(start, duration);
    const list = bookingsByCourt.get(courtId) || [];
    return list.find((b) => {
      if (ignoreId && b.id === ignoreId) return false;
      const bStart = new Date(b.start);
      const bEnd = addMinutes(new Date(b.start), b.duration);
      return overlaps(blockStart, blockEnd, bStart, bEnd);
    });
  }

  const prevP1Ref = useRef('');
  useEffect(() => {
    const p1 = form.p1Name?.trim() || '';
    const prev = prevP1Ref.current;
    if ((!form.bookedBy?.trim() || form.bookedBy?.trim() === prev) && p1) {
      setForm((f) => ({ ...f, bookedBy: p1 }));
    }
    prevP1Ref.current = p1;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [form.p1Name]);

  function saveBooking() {
    if (!form.courtId || !form.start) {
      alert('Seleziona campo e orario.');
      return;
    }
    const start = floorToSlot(form.start, cfg.slotMinutes);
    const now = new Date();
    if (start < now) {
      alert('Non puoi prenotare nel passato.');
      return;
    }
    const ignoreId = editingId || null;
    if (existingOverlap(form.courtId, start, form.duration, ignoreId)) {
      alert('Esiste già una prenotazione che si sovrappone su questo campo.');
      return;
    }

    const pNames = [form.p1Name, form.p2Name, form.p3Name, form.p4Name]
      .map((s) => (s || '').trim())
      .filter(Boolean);
    const pIds = pNames.map(findPlayerIdByName).filter(Boolean);
    const bookedByName = (form.bookedBy && form.bookedBy.trim()) || pNames[0] || '';

    const price = computePrice(
      start,
      form.duration,
      cfg,
      { lighting: !!form.useLighting, heating: !!form.useHeating },
      form.courtId,
      courts
    );

    const baseBooking = {
      courtId: form.courtId,
      start: start.toISOString(),
      duration: form.duration,
      players: pIds,
      playerNames: pNames,
      price,
      note: form.note?.trim() || '',
      bookedByName,
      addons: { lighting: !!form.useLighting, heating: !!form.useHeating },
      status: 'booked',
    };

    if (!editingId) {
      const booking = {
        id: crypto.randomUUID ? crypto.randomUUID() : Math.random().toString(36).slice(2),
        createdAt: Date.now(),
        ...baseBooking,
      };
      setState((s) => ({ ...s, bookings: [...(s.bookings || []), booking] }));
    } else {
      setState((s) => ({
        ...s,
        bookings: (s.bookings || []).map((b) => (b.id === editingId ? { ...b, ...baseBooking, updatedAt: Date.now() } : b)),
      }));
    }
    setModalOpen(false);
  }

  function cancelBooking(id) {
    if (!confirm('Cancellare la prenotazione?')) return;
    setState((s) => ({ ...s, bookings: (s.bookings || []).filter((b) => b.id !== id) }));
  }

  const courtName = (id) => courts.find((c) => c.id === id)?.name || id;
  const initials = (name) =>
    (name || '')
      .split(/\s+/)
      .map((p) => p[0])
      .filter(Boolean)
      .join('')
      .slice(0, 3)
      .toUpperCase();

  const SLOT_H = 52; // px

  function renderCell(courtId, t) {
    const list = bookingsByCourt.get(courtId) || [];
    const hit = list.find((b) => {
      const bStart = new Date(b.start);
      const bEnd = addMinutes(new Date(b.start), b.duration);
      return overlaps(bStart, bEnd, t, addMinutes(t, cfg.slotMinutes));
    });

    // --- SLOT NON PRENOTABILE SE PRECEDE UNA PRENOTAZIONE ---
    const hasNextBooking = list.some((b) => {
      const bStart = new Date(b.start);
      return bStart.getTime() === addMinutes(t, cfg.slotMinutes).getTime();
    });
    if (!hit && hasNextBooking) {
      // Slot non prenotabile, precede una prenotazione
      const startLabel = t.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      return (
        <div className="relative w-full h-9 rounded-lg ring-1 text-[11px] font-medium bg-gray-300 dark:bg-gray-700 opacity-60 cursor-not-allowed border-dashed border-2 border-gray-400 flex items-center justify-center" title="Slot non prenotabile: precede una prenotazione">
          <span className="absolute inset-0 grid place-items-center text-[11px] opacity-90">{startLabel}</span>
        </div>
      );
    }

    // --- SLOT LIBERO ---
    if (!hit) {
      const info = getRateInfo(t, cfg, courtId, courts);
      const alpha = greenAlphaForRate(info.rate);
      const isDiscounted = info.source === 'discounted' || info.isPromo;
      const startLabel = t.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

      return (
        <button
          type="button"
          onClick={() => openCreate(courtId, t)}
          className="relative w-full h-9 rounded-lg ring-1 text-[11px] font-medium"
          style={{ background: `rgba(16,185,129,${alpha})`, borderColor: `rgba(16,185,129,0.35)` }}
          title={info.isPromo ? 'Fascia Promo' : isDiscounted ? 'Fascia scontata' : 'Tariffa standard'}
        >
          {isDiscounted && (
            <span
              className="absolute top-0.5 right-0.5 px-1.5 py-[1px] rounded-full text-[10px] leading-none"
              style={{
                background: 'rgba(16,185,129,0.9)',
                color: '#0b0b0b',
                border: '1px solid rgba(16,185,129,0.6)',
              }}
            >
              ★ Promo
            </span>
          )}
          {/* Orario di inizio sempre visibile su tutti gli slot liberi */}
          <span className="absolute inset-0 grid place-items-center text-[11px] opacity-90">{startLabel}</span>
        </button>
      );
    }

    // --- SLOT OCCUPATO ---
    const start = new Date(hit.start);
    const end = addMinutes(start, hit.duration);
    const isStart = t.getTime() === start.getTime();
    if (!isStart) return <div className="w-full h-9" />;

    const rowSpan = Math.ceil((end - t) / (cfg.slotMinutes * 60 * 1000));
    const totalHeight = rowSpan * SLOT_H - 6;
    const labelPlayers = (hit.playerNames && hit.playerNames.length
      ? hit.playerNames
      : (hit.players || []).map((pid) => playersById?.[pid]?.name || '—')
    )
      .concat(hit.guestNames || [])
      .slice(0, 4);

    // Icone semplici emoji senza sfondo
    const lampIcon = (
      <span className="text-2xl">
        💡
      </span>
    );
    const fireIcon = (
      <span className="text-2xl">
        🔥
      </span>
    );

    return (
      <div className="w-full h-9 relative">
        <button
          type="button"
          onClick={() => openEdit(hit)}
          className="absolute left-0 right-0 px-2 py-2 ring-1 text-left text-[13px] font-semibold flex flex-col justify-center"
          style={{
            top: 0,
            height: `${totalHeight}px`,
            background: 'rgba(220, 38, 127, 0.35)',
            borderColor: 'rgba(220, 38, 127, 0.6)',
            borderRadius: '8px',
            overflow: 'hidden',
          }}
          title={`${courtName(hit.courtId)} — ${start.toLocaleTimeString([], {
            hour: '2-digit',
            minute: '2-digit',
          })} (${hit.duration}′) • clicca per modificare`}
        >
          {/* Icone in alto a sinistra, affiancate */}
          <div className="absolute left-2 top-2 flex flex-row items-center gap-2 z-20">
            {hit.addons?.lighting && lampIcon}
            {hit.addons?.heating && fireIcon}
          </div>
          <div className="flex items-center justify-between gap-2 mb-1 mt-2">
            <div className="min-w-0 flex flex-col">
              <span className="font-bold text-[15px] leading-tight">
                {start.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - {end.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} • {euro(hit.price)}
              </span>
              <span className="flex items-center gap-2 mt-1">
                <div className="text-[10px] font-medium opacity-80 flex flex-wrap gap-1">
                  {labelPlayers.map((name, i) => (
                    <span key={i} className="bg-white/20 px-1 py-0.5 rounded text-[9px] font-medium">
                      {name}
                    </span>
                  ))}
                </div>
              </span>
            </div>
            <div className="shrink-0 text-[13px] opacity-80 font-bold">{Math.round(hit.duration)}′</div>
          </div>
          <div className="text-[12px] opacity-80 truncate">
            Prenotato da: <span className="font-semibold">{hit.bookedByName || labelPlayers[0] || '—'}</span>
          </div>
          {hit.note && (
            <div className="text-[11px] opacity-70 mt-1 truncate">{hit.note}</div>
          )}
        </button>
      </div>
    );
  }

  const previewPrice = useMemo(() => {
    if (!form.start || !form.courtId) return null;
    return computePrice(
      new Date(form.start),
      form.duration,
      cfg,
      { lighting: form.useLighting, heating: form.useHeating },
      form.courtId,
      courts
    );
  }, [form.start, form.duration, form.courtId, form.useLighting, form.useHeating, cfg, courts]);
  const perPlayer = useMemo(() => (previewPrice == null ? null : previewPrice / 4), [previewPrice]);

  return (
    <Section title="Gestione Campi" T={T}>
      {/* Show loading state if state is null */}
      {!state ? (
        <div className="flex items-center justify-center py-12">
          <div className="text-center">
            <div className="text-4xl mb-4">⏳</div>
            <h3 className="text-lg font-medium mb-2 text-gray-900">Caricamento...</h3>
            <p className="text-gray-500">Caricamento configurazione campi in corso...</p>
          </div>
        </div>
      ) : (
        <>
      {/* Header moderno con navigazione integrata */}
      <div className={`flex flex-col items-center gap-6 mb-6 ${T.cardBg} ${T.border} p-6 rounded-xl shadow-lg`}>
        {/* Navigazione date centrata con frecce grandi */}
        <div className="flex items-center justify-center gap-6">
          <button 
            type="button" 
            className={`w-12 h-12 rounded-full bg-blue-500 hover:bg-blue-600 dark:bg-emerald-500 dark:hover:bg-emerald-600 text-white text-2xl font-bold shadow-lg hover:scale-110 transition-all duration-200 flex items-center justify-center`} 
            onClick={() => goOffset(-1)} 
            title="Giorno precedente"
          >
            ←
          </button>
          
          <button
            type="button"
            onClick={() => setShowDatePicker(true)}
            className={`text-3xl font-bold cursor-pointer hover:scale-105 transition-transform bg-gradient-to-r from-blue-500 to-purple-500 bg-clip-text text-transparent dark:from-emerald-400 dark:to-lime-400 px-4 py-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800`}
            title="Clicca per aprire calendario"
          >
            {dayLabel}
          </button>
          
          <button 
            type="button" 
            className={`w-12 h-12 rounded-full bg-blue-500 hover:bg-blue-600 dark:bg-emerald-500 dark:hover:bg-emerald-600 text-white text-2xl font-bold shadow-lg hover:scale-110 transition-all duration-200 flex items-center justify-center`} 
            onClick={() => goOffset(1)} 
            title="Giorno successivo"
          >
            →
          </button>
        </div>
      </div>

      {/* Calendario popup con griglia giorni */}
      {showDatePicker && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className={`${T.cardBg} ${T.border} rounded-2xl shadow-2xl p-8 max-w-2xl w-full`}>
            <div className="flex items-center justify-between mb-6">
              <h3 className={`text-2xl font-bold ${T.text} flex items-center gap-2`}>
                📅 Seleziona data
              </h3>
              <button 
                type="button" 
                onClick={() => setShowDatePicker(false)}
                className={`w-10 h-10 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 flex items-center justify-center text-2xl font-bold transition-colors`}
                title="Chiudi"
              >
                ✕
              </button>
            </div>
            
            {/* Calendario visuale */}
            <CalendarGrid 
              currentDay={day}
              onSelectDay={(selectedDay) => {
                setDay(selectedDay);
                setShowDatePicker(false);
              }}
              T={T}
            />
            
            {/* Pulsanti rapidi */}
            <div className="mt-6 grid grid-cols-3 gap-3">
              <button 
                type="button" 
                onClick={() => {
                  goToday();
                  setShowDatePicker(false);
                }}
                className={`${T.btnPrimary} py-3 text-sm font-semibold flex items-center justify-center gap-2`}
              >
                🏠 Oggi
              </button>
              <button 
                type="button" 
                onClick={() => {
                  goOffset(-1);
                  setShowDatePicker(false);
                }}
                className={`${T.btnGhost} py-3 text-sm font-medium`}
              >
                ← Ieri
              </button>
              <button 
                type="button" 
                onClick={() => {
                  goOffset(1);
                  setShowDatePicker(false);
                }}
                className={`${T.btnGhost} py-3 text-sm font-medium`}
              >
                Domani →
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Griglia campi */}
      <div className="overflow-x-auto pb-4">
        <div className="min-w-[720px] grid gap-2" style={{ gridTemplateColumns: `repeat(${courts.length}, 1fr)` }}>
          {/* Header campi */}
          {courts.map((c) => (
            <div key={`hdr_${c.id}`} className={`px-2 py-3 text-base font-bold text-center rounded-xl shadow-md mb-2 ${T.cardBg} ${T.border}`}>
              <span className="inline-flex items-center gap-2">
                <span className={`w-7 h-7 rounded-full bg-blue-400 dark:bg-emerald-400 text-white flex items-center justify-center font-bold shadow`}>{c.name[0]}</span>
                <div className="flex flex-col items-start">
                  <span>{c.name}</span>
                  {form.start && hasPromoSlot(c.id, form.start) && (
                    <span className="text-xs bg-gradient-to-r from-yellow-400 to-orange-400 text-black px-2 py-0.5 rounded-full font-medium">
                      🏷️ Promo
                    </span>
                  )}
                  {c.hasHeating && (
                    <span className="text-xs text-orange-500 dark:text-orange-400 font-medium">
                      🔥 Riscaldato
                    </span>
                  )}
                </div>
              </span>
            </div>
          ))}

          {/* Celle prenotazione */}
          {timeSlots.map((t, r) => (
            <React.Fragment key={t.getTime()}>
              {courts.map((c) => (
                <div key={c.id + '_' + r} className={`px-0.5 py-0.5 ${T.cardBg} ${T.border} rounded-lg`}>
                  {renderCell(c.id, t)}
                </div>
              ))}
            </React.Fragment>
          ))}
        </div>
      </div>

      {/* Modal glassmorphism per prenotazione */}
      <Modal
        open={modalOpen}
        onClose={() => setModalOpen(false)}
        title={editingId ? 'Modifica prenotazione' : 'Nuova prenotazione'}
        T={T}
      >
        {!form.start ? (
          <div className={`text-center py-8 text-lg ${T.subtext}`}>Seleziona uno slot libero nella griglia.</div>
        ) : (
          <div className="rounded-2xl p-6 shadow-2xl bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-600">
            <div className="grid sm:grid-cols-2 gap-4">
              <div className="flex flex-col gap-1">
                <label className={`text-xs font-semibold ${T.subtext}`}>Campo</label>
                <select value={form.courtId} onChange={(e) => setForm((f) => ({ ...f, courtId: e.target.value }))} className={T.input}>
                  {state.courts.map((c) => (
                    <option key={c.id} value={c.id}>{c.name}</option>
                  ))}
                </select>
                {form.courtId && hasPromoSlot(form.courtId, form.start) && (
                  <div className="text-xs bg-gradient-to-r from-yellow-400 to-orange-400 text-black px-2 py-1 rounded-lg font-medium inline-flex items-center gap-1 w-fit">
                    🏷️ Fascia Promo attiva
                  </div>
                )}
              </div>
              <div className="flex flex-col gap-1">
                <label className={`text-xs font-semibold ${T.subtext}`}>Inizio</label>
                <input type="time" value={`${String(new Date(form.start).getHours()).padStart(2, '0')}:${String(new Date(form.start).getMinutes()).padStart(2, '0')}`} onChange={(e) => { const [hh, mm] = e.target.value.split(':').map(Number); const d = new Date(form.start); d.setHours(hh, mm, 0, 0); setForm((f) => ({ ...f, start: floorToSlot(d, cfg.slotMinutes) })); }} className={T.input} />
              </div>
              <div className="flex flex-col gap-1">
                <label className={`text-xs font-semibold ${T.subtext}`}>Durata</label>
                <select value={form.duration} onChange={(e) => setForm((f) => ({ ...f, duration: Number(e.target.value) }))} className={T.input}>
                  {(cfg.defaultDurations || [60, 90, 120]).map((m) => (
                    <option key={m} value={m}>{m} minuti</option>
                  ))}
                </select>
              </div>

              <div className="sm:col-span-2">
                {/* Addon in layout verticale per mobile, orizzontale per desktop */}
                <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3 mb-3">
                  {cfg.addons?.lightingEnabled && (
                    <label className="inline-flex items-center gap-2 cursor-pointer">
                      <input type="checkbox" checked={form.useLighting} onChange={(e) => setForm((f) => ({ ...f, useLighting: e.target.checked }))} />
                      <span className="text-sm font-medium text-blue-600 dark:text-emerald-400">Illuminazione</span>
                      <span className={`text-xs ${T.subtext}`}>+{euro(cfg.addons.lightingFee || 0)}</span>
                    </label>
                  )}
                  {cfg.addons?.heatingEnabled && (() => {
                    const selectedCourt = courts.find(c => c.id === form.courtId);
                    return selectedCourt?.hasHeating && (
                      <label className="inline-flex items-center gap-2 cursor-pointer">
                        <input type="checkbox" checked={form.useHeating} onChange={(e) => setForm((f) => ({ ...f, useHeating: e.target.checked }))} />
                        <span className="text-sm font-medium text-purple-600 dark:text-lime-400">Riscaldamento</span>
                        <span className={`text-xs ${T.subtext}`}>+{euro(cfg.addons.heatingFee || 0)}</span>
                      </label>
                    );
                  })()}
                </div>
                
                {/* Totale separato */}
                <div className={`font-bold text-lg text-blue-700 dark:text-emerald-400 text-center sm:text-left`}>
                  Totale: {previewPrice == null ? '—' : euro(previewPrice)}
                  {previewPrice != null && (
                    <span className={`ml-3 text-xs ${T.subtext}`}>/ giocatore: {euro2(previewPrice / 4)}</span>
                  )}
                </div>
              </div>

              {/* Giocatori in grid compatta */}
              <div>
                <div className="text-xs font-semibold text-gray-700 dark:text-gray-300 mb-2">👥 Giocatori</div>
                <div className="grid grid-cols-2 gap-2">
                  {[
                    ['p1Name', 'Giocatore 1'],
                    ['p2Name', 'Giocatore 2'], 
                    ['p3Name', 'Giocatore 3'],
                    ['p4Name', 'Giocatore 4'],
                  ].map(([key, label]) => (
                    <div key={key}>
                      <label className={`text-xs font-medium ${T.subtext} mb-1 block`}>{label}</label>
                      <input 
                        list="players-list" 
                        value={form[key]} 
                        onChange={(e) => setForm((f) => ({ ...f, [key]: e.target.value }))} 
                        className={`${T.input} text-sm py-2`} 
                        placeholder="Nome giocatore" 
                      />
                    </div>
                  ))}
                </div>
              </div>

              {/* Prenotato da e note */}
              <div className="space-y-3">
                <div>
                  <label className={`text-xs font-semibold ${T.subtext} mb-1 block`}>Prenotazione a nome di</label>
                  <input 
                    value={form.bookedBy} 
                    onChange={(e) => setForm((f) => ({ ...f, bookedBy: e.target.value }))} 
                    className={`${T.input} text-sm py-2`} 
                    placeholder="Es. Andrea Paris" 
                  />
                </div>

                <div>
                  <label className={`text-xs font-semibold ${T.subtext} mb-1 block`}>Note</label>
                  <input 
                    value={form.note} 
                    onChange={(e) => setForm((f) => ({ ...f, note: e.target.value }))} 
                    className={`${T.input} text-sm py-2`} 
                    placeholder="Es. Lezioni, torneo, ecc." 
                  />
                </div>
              </div>

              {/* Datalist per autocompletamento */}
              <datalist id="players-list">
                {playersAlpha.map((p) => (
                  <option key={p.id} value={p.name} />
                ))}
              </datalist>

              {/* Azioni desktop */}
              <div className="hidden md:flex gap-2 pt-2">
                <button type="button" onClick={saveBooking} className={`${T.btnPrimary} py-2`}>
                  {editingId ? 'Aggiorna prenotazione' : 'Conferma prenotazione'}
                </button>
                <button type="button" onClick={() => setModalOpen(false)} className={`${T.btnGhost} py-2`}>
                  Annulla
                </button>
                {editingId && (
                  <button 
                    type="button" 
                    onClick={() => cancelBooking(editingId)} 
                    className="bg-gradient-to-r from-rose-500 to-rose-600 text-white font-bold px-4 py-2 rounded-lg shadow-lg hover:scale-105 transition"
                  >
                    Elimina prenotazione
                  </button>
                )}
              </div>

              {/* Spazio per pulsanti mobili */}
              <div className="h-16 md:hidden"></div>
            </div>

            {/* Pulsanti mobili fluttuanti */}
            <div className="md:hidden fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-600 p-4 z-50">
              <div className="flex gap-2 max-w-md mx-auto">
                <button 
                  type="button" 
                  onClick={saveBooking} 
                  className={`flex-1 ${T.btnPrimary} py-3 text-sm font-semibold`}
                >
                  {editingId ? '✓ Aggiorna' : '✓ Conferma'}
                </button>
                <button 
                  type="button" 
                  onClick={() => setModalOpen(false)} 
                  className="flex-1 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 font-semibold px-4 py-3 rounded-lg text-sm"
                >
                  Annulla
                </button>
                {editingId && (
                  <button 
                    type="button" 
                    onClick={() => cancelBooking(editingId)} 
                    className="bg-red-500 text-white font-semibold px-4 py-3 rounded-lg text-sm shadow-lg"
                  >
                    🗑️
                  </button>
                )}
              </div>
            </div>
          </div>
        )}
      </Modal>

      {/* Pulsanti fluttuanti FUORI dal modal - sempre sopra tutto su mobile */}
      {modalOpen && form.start && (
        <>
          <div className="fixed bottom-24 left-4 right-4 z-[99999] flex gap-3 md:hidden bg-white/95 dark:bg-gray-900/95 backdrop-blur-md p-3 rounded-2xl shadow-2xl border border-gray-200 dark:border-gray-700">
            <button 
              type="button" 
              onClick={() => setModalOpen(false)} 
              className="flex-1 bg-gray-500 hover:bg-gray-600 text-white font-bold py-4 rounded-xl shadow-lg transition-all duration-200 hover:scale-105"
            >
              ❌ Annulla
            </button>
            <button 
              type="button" 
              onClick={saveBooking} 
              className="flex-1 bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 text-white font-bold py-4 rounded-xl shadow-lg transition-all duration-200 hover:scale-105"
            >
              ✅ {editingId ? 'Aggiorna' : 'Conferma'}
            </button>
          </div>

          {/* Pulsante elimina fluttuante per mobile (solo in editing) */}
          {editingId && (
            <div className="fixed bottom-8 left-1/2 transform -translate-x-1/2 z-[99999] md:hidden">
              <button 
                type="button" 
                onClick={() => cancelBooking(editingId)} 
                className="bg-gradient-to-r from-rose-500 to-rose-600 hover:from-rose-600 hover:to-rose-700 text-white font-bold px-8 py-3 rounded-full shadow-2xl transition-all duration-200 hover:scale-105 border border-rose-300"
              >
                🗑️ Elimina
              </button>
            </div>
          )}
        </>
      )}
      </>
      )}
    </Section>
  );
}
