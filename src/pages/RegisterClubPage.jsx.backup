// =============================================
// FILE: src/pages/RegisterClubPage.jsx
// Pagina di registrazione per i circoli sportivi
// =============================================
import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { Building2, MapPin, Phone, Mail, Globe, Upload, ArrowLeft, Check, Lock, User } from 'lucide-react';
import { themeTokens, LOGO_URL } from '@lib/theme.js';
import { useAuth } from '@contexts/AuthContext.jsx';
import { auth, db } from '@services/firebase.js';
import { createUserWithEmailAndPassword, updateProfile } from 'firebase/auth';
import { collection, addDoc, doc, setDoc, updateDoc, serverTimestamp } from 'firebase/firestore';

export default function RegisterClubPage() {
  const navigate = useNavigate();
  const { user } = useAuth();
  const T = React.useMemo(() => themeTokens(), []);

  const [formData, setFormData] = useState({
    // STEP 1: Dati circolo base
    clubName: '',
    clubEmail: '',
    clubPhone: '',
    password: '',
    confirmPassword: '',
    
    // STEP 2: Info circolo dettagliate
    logo: null,
    description: '',
    address: {
      street: '',
      city: '',
      province: '',
      postalCode: '',
      country: 'Italia',
      formatted: '', // Indirizzo formattato da ricerca
      lat: null,
      lng: null
    },
    googleMapsLink: '',
    
    // STEP 3: Dati operatore/admin
    adminFirstName: '',
    adminLastName: '',
    adminEmail: '',
    adminPhone: ''
  });

  const [logoPreview, setLogoPreview] = useState(null);
  const [loading, setLoading] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [error, setError] = useState(null);
  const [step, setStep] = useState(1); // 1: Dati circolo, 2: Logo e dettagli, 3: Operatore
  const [showMapsInstructions, setShowMapsInstructions] = useState(false);

  // Redirect if already logged in
  React.useEffect(() => {
    if (user) {
      navigate('/dashboard');
    }
  }, [user, navigate]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    if (name.startsWith('address.')) {
      const field = name.split('.')[1];
      setFormData(prev => ({
        ...prev,
        address: { ...prev.address, [field]: value }
      }));
    } else if (name.startsWith('contact.')) {
      const field = name.split('.')[1];
      setFormData(prev => ({
        ...prev,
        contact: { ...prev.contact, [field]: value }
      }));
    } else {
      setFormData(prev => ({ ...prev, [name]: value }));
    }
  };

  const handleLogoChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      // Verifica dimensione file (max 5MB)
      if (file.size > 5 * 1024 * 1024) {
        alert('Il file √® troppo grande. Dimensione massima: 5MB');
        return;
      }

      // Verifica tipo file
      if (!file.type.startsWith('image/')) {
        alert('Formato file non valido. Usa PNG, JPG o GIF');
        return;
      }

      setFormData(prev => ({ ...prev, logo: file }));
      const reader = new FileReader();
      reader.onloadend = () => {
        setLogoPreview(reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  // Funzione per upload logo su Cloudinary
  const uploadLogo = async (file, clubId) => {
    try {
      setUploading(true);

      const cloudName = 'dlmi2epev';
      const uploadPreset = 'club_logos';

      const uploadFormData = new FormData();
      uploadFormData.append('file', file);
      uploadFormData.append('upload_preset', uploadPreset);
      uploadFormData.append('folder', `playsport/logos/${clubId}`);
      uploadFormData.append('public_id', `logo_${Date.now()}`);

      console.log('üì§ Uploading logo to Cloudinary...');
      const response = await fetch(`https://api.cloudinary.com/v1_1/${cloudName}/image/upload`, {
        method: 'POST',
        body: uploadFormData,
      });

      if (!response.ok) {
        const error = await response.json();
        console.error('Upload error details:', error);
        throw new Error(error.error?.message || 'Upload failed');
      }

      const data = await response.json();
      const imageUrl = data.secure_url;

      console.log('‚úÖ Logo caricato con successo su Cloudinary:', imageUrl);
      return imageUrl;
    } catch (error) {
      console.error("‚ùå Errore durante l'upload del logo:", error);
      throw error;
    } finally {
      setUploading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      // 1. Crea l'account Firebase Auth usando l'email del circolo
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        formData.clubEmail,
        formData.password
      );
      const newUser = userCredential.user;

      // 2. Aggiorna il profilo con il nome completo dell'operatore
      const adminFullName = `${formData.adminFirstName} ${formData.adminLastName}`.trim();
      await updateProfile(newUser, {
        displayName: adminFullName
      });

      // 3. Crea il circolo (status: pending)
      const clubData = {
        name: formData.clubName,
        description: formData.description || '',
        address: {
          street: formData.address.street,
          city: formData.address.city,
          province: formData.address.province || '',
          postalCode: formData.address.postalCode || '',
          country: formData.address.country || 'Italia',
          formatted: formData.address.formatted || ''
        },
        location: {
          city: formData.address.city,
          province: formData.address.province || '',
          coordinates: formData.address.lat && formData.address.lng 
            ? { lat: formData.address.lat, lng: formData.address.lng }
            : null
        },
        contact: {
          phone: formData.clubPhone,
          email: formData.clubEmail,
          website: formData.googleMapsLink || ''
        },
        googleMapsLink: formData.googleMapsLink || '',
        logoUrl: null, // Verr√† aggiornato dopo l'upload
        settings: {
          bookingDuration: 90,
          advanceBookingDays: 14,
          cancellationHours: 24,
          allowGuestBooking: false
        },
        sports: [],
        courts: [],
        instructors: [],
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp(),
        isActive: false, // Non attivo fino all'approvazione
        status: 'pending', // In attesa di approvazione
        ownerId: newUser.uid,
        ownerEmail: formData.clubEmail
      };

      const clubRef = await addDoc(collection(db, 'clubs'), clubData);

      // 4. Upload logo su Cloudinary (se presente)
      if (formData.logo) {
        try {
          const logoUrl = await uploadLogo(formData.logo, clubRef.id);
          // Aggiorna il circolo con l'URL del logo
          await updateDoc(doc(db, 'clubs', clubRef.id), {
            logoUrl: logoUrl,
            updatedAt: serverTimestamp()
          });
          console.log('‚úÖ Logo aggiunto al circolo');
        } catch (uploadError) {
          console.error('‚ö†Ô∏è Errore upload logo (continuo comunque):', uploadError);
          // Non blocchiamo la registrazione se l'upload del logo fallisce
        }
      }

      // 5. Crea il profilo utente con ruolo club_admin (underscore!)
      await setDoc(doc(db, 'users', newUser.uid), {
        uid: newUser.uid,
        email: formData.clubEmail, // Email del circolo per login
        displayName: adminFullName,
        firstName: formData.adminFirstName,
        lastName: formData.adminLastName,
        phone: formData.adminPhone, // Telefono dell'operatore
        role: 'club_admin', // ‚úÖ UNDERSCORE non trattino!
        clubId: clubRef.id,
        clubName: formData.clubName,
        createdAt: serverTimestamp(),
        registeredAt: serverTimestamp()
      });

      // 6. Crea il profilo nel club
      await setDoc(doc(db, 'clubs', clubRef.id, 'profiles', newUser.uid), {
        uid: newUser.uid,
        firstName: formData.adminFirstName,
        lastName: formData.adminLastName,
        email: formData.adminEmail, // Email personale dell'operatore
        phone: formData.adminPhone,
        role: 'club_admin', // ‚úÖ UNDERSCORE non 'admin'!
        isClubAdmin: true,
        status: 'active',
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp()
      });

      // 7. Crea il documento affiliation
      const affiliationId = `${newUser.uid}_${clubRef.id}`;
      await setDoc(doc(db, 'affiliations', affiliationId), {
        userId: newUser.uid,
        clubId: clubRef.id,
        role: 'club_admin',
        status: 'approved',
        isClubAdmin: true,
        requestedAt: serverTimestamp(),
        approvedAt: serverTimestamp(),
        joinedAt: serverTimestamp(),
        _createdAt: serverTimestamp(),
        _updatedAt: serverTimestamp()
      });

      // 8. Aggiungi l'utente all'array managers del club
      await updateDoc(doc(db, 'clubs', clubRef.id), {
        managers: [newUser.uid],
        updatedAt: serverTimestamp()
      });

      // 9. Successo! Redirect alla dashboard admin del circolo
      const successMessage = formData.logo 
        ? `‚úÖ Registrazione completata!\n\nIl circolo "${formData.clubName}" √® stato creato con il logo.\n\nOperatore: ${adminFullName}\nEmail: ${formData.adminEmail}\nTelefono: ${formData.adminPhone}\n\nPotrai configurare campi, istruttori e orari dalla dashboard admin.`
        : `‚úÖ Registrazione completata!\n\nIl circolo "${formData.clubName}" √® stato creato.\n\nOperatore: ${adminFullName}\nEmail: ${formData.adminEmail}\nTelefono: ${formData.adminPhone}\n\nPotrai aggiungere un logo dalle impostazioni del circolo.`;
      
      alert(successMessage);
      // Redirect alla dashboard ADMIN del circolo
      navigate(`/club/${clubRef.id}/admin/dashboard`);
      
    } catch (err) {
      console.error('Error registering club:', err);
      if (err.code === 'auth/email-already-in-use') {
        setError('Questa email √® gi√† registrata. Usa un\'altra email o accedi.');
      } else if (err.code === 'auth/weak-password') {
        setError('La password deve essere di almeno 6 caratteri.');
      } else if (err.code === 'auth/invalid-email') {
        setError('Email non valida.');
      } else {
        setError('Errore durante la registrazione. Riprova pi√π tardi.');
      }
    } finally {
      setLoading(false);
    }
  };

  // Validazioni per ogni step
  const canProceedToStep2 = 
    formData.clubName && 
    formData.clubEmail && 
    formData.clubPhone &&
    formData.password && 
    formData.confirmPassword && 
    formData.password === formData.confirmPassword && 
    formData.password.length >= 6;

  const canProceedToStep3 = 
    formData.description &&
    formData.address.city;

  const canSubmit = 
    formData.adminFirstName && 
    formData.adminLastName &&
    formData.adminEmail &&
    formData.adminPhone;

  return (
    <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-white to-blue-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
      {/* Header */}
      <header className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <Link to="/" className="flex items-center gap-3">
              <img src={LOGO_URL} alt="Play-Sport.pro" className="h-10" />
              <span className="text-xl font-bold text-neutral-900 dark:text-white">
                Play-Sport.pro
              </span>
            </Link>
            <Link
              to="/"
              className="flex items-center gap-2 text-neutral-600 dark:text-gray-300 hover:text-emerald-600 dark:hover:text-blue-400 transition-colors"
            >
              <ArrowLeft className="w-4 h-4" />
              Torna alla home
            </Link>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        {/* Header Section */}
        <div className="text-center mb-12">
          <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-2xl flex items-center justify-center mx-auto mb-6 shadow-lg">
            <Building2 className="w-10 h-10 text-white" />
          </div>
          <h1 className="text-4xl font-bold text-neutral-900 dark:text-white mb-4">
            Registra il Tuo Circolo
          </h1>
          <p className="text-xl text-neutral-600 dark:text-gray-300">
            Unisciti alla nostra piattaforma e gestisci il tuo circolo sportivo in modo professionale
          </p>
        </div>

        {/* Progress Steps */}
        <div className="mb-12">
          <div className="flex items-center justify-center gap-4">
            {[1, 2, 3].map((s) => (
              <React.Fragment key={s}>
                <div className="flex items-center gap-2">
                  <div
                    className={`w-10 h-10 rounded-full flex items-center justify-center font-semibold transition-all ${
                      step > s
                        ? 'bg-emerald-500 text-white'
                        : step === s
                        ? 'bg-blue-500 text-white ring-4 ring-blue-500/20'
                        : 'bg-gray-200 dark:bg-gray-700 text-gray-500 dark:text-gray-400'
                    }`}
                  >
                    {step > s ? <Check className="w-5 h-5" /> : s}
                  </div>
                  <span className={`text-sm font-medium ${step >= s ? 'text-neutral-900 dark:text-white' : 'text-gray-500'}`}>
                    {s === 1 ? 'Dati Circolo' : s === 2 ? 'Logo & Dettagli' : 'Operatore'}
                  </span>
                </div>
                {s < 3 && (
                  <div className={`w-12 h-1 rounded ${step > s ? 'bg-emerald-500' : 'bg-gray-200 dark:bg-gray-700'}`} />
                )}
              </React.Fragment>
            ))}
          </div>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8">
          {error && (
            <div className="mb-6 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg text-red-700 dark:text-red-400">
              {error}
            </div>
          )}

          {/* Step 1: Dati Circolo Base */}
          {step === 1 && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-neutral-900 dark:text-white mb-6">
                üìã Dati del Circolo
              </h2>

              <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6">
                <p className="text-sm text-blue-800 dark:text-blue-300">
                  Inserisci i dati principali del tuo circolo sportivo. Questi dati saranno utilizzati per creare l'account e per il login.
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-gray-300 mb-2">
                  Nome del Circolo *
                </label>
                <div className="relative">
                  <Building2 className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <input
                    type="text"
                    name="clubName"
                    value={formData.clubName}
                    onChange={handleInputChange}
                    required
                    className="w-full pl-12 pr-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-neutral-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="es: Sporting Club Milano"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-gray-300 mb-2">
                  Email del Circolo *
                </label>
                <div className="relative">
                  <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <input
                    type="email"
                    name="clubEmail"
                    value={formData.clubEmail}
                    onChange={handleInputChange}
                    required
                    className="w-full pl-12 pr-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-neutral-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="info@circolo.com"
                  />
                </div>
                <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
                  Questa email sar√† usata per il login alla piattaforma
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-gray-300 mb-2">
                  Telefono del Circolo *
                </label>
                <div className="relative">
                  <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <input
                    type="tel"
                    name="clubPhone"
                    value={formData.clubPhone}
                    onChange={handleInputChange}
                    required
                    className="w-full pl-12 pr-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-neutral-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="+39 02 1234567"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-gray-300 mb-2">
                  Password *
                </label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <input
                    type="password"
                    name="password"
                    value={formData.password}
                    onChange={handleInputChange}
                    required
                    minLength={6}
                    className="w-full pl-12 pr-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-neutral-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Minimo 6 caratteri"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-gray-300 mb-2">
                  Conferma Password *
                </label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <input
                    type="password"
                    name="confirmPassword"
                    value={formData.confirmPassword}
                    onChange={handleInputChange}
                    required
                    minLength={6}
                    className="w-full pl-12 pr-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-neutral-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Ripeti la password"
                  />
                </div>
                {formData.confirmPassword && formData.password !== formData.confirmPassword && (
                  <p className="mt-1 text-xs text-red-600 dark:text-red-400">
                    Le password non corrispondono
                  </p>
                )}
              </div>

              <div className="flex justify-end">
                <button
                  type="button"
                  onClick={() => setStep(2)}
                  disabled={!canProceedToStep2}
                  className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-300 dark:disabled:bg-gray-600 disabled:cursor-not-allowed text-white px-8 py-3 rounded-lg font-semibold transition-colors"
                >
                  Continua ‚Üí
                </button>
              </div>
            </div>
          )}

          {/* Step 2: Informazioni Base */}
          {step === 2 && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-neutral-900 dark:text-white mb-6">
                Informazioni di Base
              </h2>

              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-gray-300 mb-2">
                  Nome Circolo *
                </label>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  required
                  className="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-neutral-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="es. Tennis Club Milano"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-gray-300 mb-2">
                  Descrizione
                </label>
                <textarea
                  name="description"
                  value={formData.description}
                  onChange={handleInputChange}
                  rows={4}
                  className="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-neutral-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                  placeholder="Breve descrizione del tuo circolo..."
                />
              </div>

              <div className="grid md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-neutral-700 dark:text-gray-300 mb-2">
                    Indirizzo *
                  </label>
                  <input
                    type="text"
                    name="address.street"
                    value={formData.address.street}
                    onChange={handleInputChange}
                    required
                    className="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-neutral-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Via, numero civico"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-neutral-700 dark:text-gray-300 mb-2">
                    Citt√† *
                  </label>
                  <input
                    type="text"
                    name="address.city"
                    value={formData.address.city}
                    onChange={handleInputChange}
                    required
                    className="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-neutral-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Milano"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-neutral-700 dark:text-gray-300 mb-2">
                    Provincia
                  </label>
                  <input
                    type="text"
                    name="address.province"
                    value={formData.address.province}
                    onChange={handleInputChange}
                    className="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-neutral-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="MI"
                    maxLength={2}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-neutral-700 dark:text-gray-300 mb-2">
                    CAP
                  </label>
                  <input
                    type="text"
                    name="address.postalCode"
                    value={formData.address.postalCode}
                    onChange={handleInputChange}
                    className="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-neutral-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="20100"
                    maxLength={5}
                  />
                </div>
              </div>

              <div className="flex justify-between">
                <button
                  type="button"
                  onClick={() => setStep(1)}
                  className="border-2 border-gray-300 dark:border-gray-600 text-neutral-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 px-8 py-3 rounded-lg font-semibold transition-colors"
                >
                  Indietro
                </button>
                <button
                  type="button"
                  onClick={() => setStep(3)}
                  disabled={!canProceedToStep3}
                  className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-300 dark:disabled:bg-gray-600 disabled:cursor-not-allowed text-white px-8 py-3 rounded-lg font-semibold transition-colors"
                >
                  Continua
                </button>
              </div>
            </div>
          )}

          {/* Step 3: Contatti */}
          {step === 3 && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-neutral-900 dark:text-white mb-6">
                Informazioni di Contatto
              </h2>

              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-gray-300 mb-2">
                  Telefono *
                </label>
                <div className="relative">
                  <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <input
                    type="tel"
                    name="contact.phone"
                    value={formData.contact.phone}
                    onChange={handleInputChange}
                    required
                    className="w-full pl-12 pr-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-neutral-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="+39 123 456 7890"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-gray-300 mb-2">
                  Email *
                </label>
                <div className="relative">
                  <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <input
                    type="email"
                    name="contact.email"
                    value={formData.contact.email}
                    onChange={handleInputChange}
                    required
                    className="w-full pl-12 pr-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-neutral-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="info@circolo.it"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-gray-300 mb-2">
                  Sito Web
                </label>
                <div className="relative">
                  <Globe className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <input
                    type="url"
                    name="contact.website"
                    value={formData.contact.website}
                    onChange={handleInputChange}
                    className="w-full pl-12 pr-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-neutral-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="https://www.circolo.it"
                  />
                </div>
              </div>

              <div className="flex justify-between">
                <button
                  type="button"
                  onClick={() => setStep(2)}
                  className="border-2 border-gray-300 dark:border-gray-600 text-neutral-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 px-8 py-3 rounded-lg font-semibold transition-colors"
                >
                  Indietro
                </button>
                <button
                  type="button"
                  onClick={() => setStep(4)}
                  disabled={!canProceedToStep4}
                  className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-300 dark:disabled:bg-gray-600 disabled:cursor-not-allowed text-white px-8 py-3 rounded-lg font-semibold transition-colors"
                >
                  Continua
                </button>
              </div>
            </div>
          )}

          {/* Step 4: Logo */}
          {step === 4 && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-neutral-900 dark:text-white mb-6">
                Logo del Circolo
              </h2>

              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-gray-300 mb-2">
                  Carica il logo (opzionale)
                </label>
                
                <div className="mt-2 flex flex-col items-center">
                  {logoPreview ? (
                    <div className="mb-4">
                      <img
                        src={logoPreview}
                        alt="Logo preview"
                        className="w-32 h-32 object-cover rounded-lg border-2 border-gray-300 dark:border-gray-600"
                      />
                    </div>
                  ) : (
                    <div className="w-32 h-32 mb-4 bg-gray-100 dark:bg-gray-700 rounded-lg border-2 border-dashed border-gray-300 dark:border-gray-600 flex items-center justify-center">
                      <Upload className="w-8 h-8 text-gray-400" />
                    </div>
                  )}
                  <label className="cursor-pointer bg-white dark:bg-gray-700 border-2 border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600 text-neutral-700 dark:text-gray-300 px-6 py-3 rounded-lg font-medium transition-colors">
                    <span>Scegli file</span>
                    <input
                      type="file"
                      accept="image/*"
                      onChange={handleLogoChange}
                      className="hidden"
                    />
                  </label>
                  <p className="mt-2 text-sm text-gray-500 dark:text-gray-400">
                    PNG, JPG o GIF (max 5MB)
                  </p>
                  <p className="mt-1 text-xs text-blue-600 dark:text-blue-400">
                    ‚ú® Upload su Cloudinary - veloce e sicuro
                  </p>
                </div>
              </div>

              <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
                <h3 className="font-semibold text-blue-900 dark:text-blue-300 mb-2">
                  Cosa succede dopo?
                </h3>
                <ul className="space-y-2 text-sm text-blue-800 dark:text-blue-400">
                  <li className="flex items-start gap-2">
                    <Check className="w-4 h-4 mt-0.5 flex-shrink-0" />
                    <span>Riceverai una email di conferma</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <Check className="w-4 h-4 mt-0.5 flex-shrink-0" />
                    <span>Il nostro team verificher√† i dati del circolo</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <Check className="w-4 h-4 mt-0.5 flex-shrink-0" />
                    <span>Ti contatteremo per completare la configurazione</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <Check className="w-4 h-4 mt-0.5 flex-shrink-0" />
                    <span>Potrai iniziare a gestire il tuo circolo!</span>
                  </li>
                </ul>
              </div>

              <div className="flex justify-between">
                <button
                  type="button"
                  onClick={() => setStep(3)}
                  className="border-2 border-gray-300 dark:border-gray-600 text-neutral-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 px-8 py-3 rounded-lg font-semibold transition-colors"
                >
                  Indietro
                </button>
                <button
                  type="submit"
                  disabled={loading || uploading}
                  className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 disabled:from-gray-300 disabled:to-gray-300 dark:disabled:from-gray-600 dark:disabled:to-gray-600 disabled:cursor-not-allowed text-white px-8 py-3 rounded-lg font-semibold transition-all shadow-lg hover:shadow-xl"
                >
                  {uploading ? 'üì§ Caricamento logo...' : loading ? 'Creazione account...' : 'Completa Registrazione'}
                </button>
              </div>
            </div>
          )}
        </form>

        {/* Footer Note */}
        <div className="mt-8 text-center text-sm text-gray-500 dark:text-gray-400">
          Hai gi√† un account?{' '}
          <Link to="/login" className="text-blue-600 dark:text-blue-400 hover:underline font-medium">
            Accedi qui
          </Link>
        </div>
      </div>
    </div>
  );
}
