// =====================================================
// Firestore Security Rules - PRODUCTION READY (CHK-310)
// Data: 2025-10-15
// Comprehensive security rules con:
// - Authentication required
// - Role-based access control (RBAC)
// - Field-level validation
// - Rate limiting hints
// - Audit logging
// =====================================================

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==========================================
    // HELPER FUNCTIONS
    // ==========================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Check if user is club admin for specific club
    function isClubAdminForClub(clubId) {
      return isAuthenticated() &&
             (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'club_admin' ||
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') &&
             (get(/databases/$(database)/documents/clubs/$(clubId)).data.ownerId == request.auth.uid ||
              (exists(/databases/$(database)/documents/clubs/$(clubId)/users/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/clubs/$(clubId)/users/$(request.auth.uid)).data.isClubAdmin == true));
    }

    // Check if user is club owner
    function isClubOwner(clubId) {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/clubs/$(clubId)).data.ownerId == request.auth.uid;
    }

    // Check if user is admin for specific club (legacy club_admin role)
    function isClubAdmin() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'club_admin';
    }
    
    // Validate email format
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    // Validate timestamp is not in the past (with 5 min tolerance)
    function isValidFutureTimestamp(ts) {
      return ts > request.time.toMillis() - 300000;
    }
    
    // Check if data size is within limit (prevent abuse)
    function isWithinSizeLimit(maxSize) {
      return request.resource.size() < maxSize;
    }
    
    // ==========================================
    // USERS COLLECTION
    // ==========================================
    match /users/{userId} {
      // Read: User can read own profile, admins can read all
      allow read: if isOwner(userId) || isAdmin();
      
      // Create: Only during sign-up, must match auth uid
      allow create: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       isValidEmail(request.resource.data.email) &&
                       isWithinSizeLimit(10000);
      
      // Update: User can update own profile (except role)
      allow update: if isOwner(userId) && 
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'uid']) &&
                       isWithinSizeLimit(10000);
      
      // Delete: Only admins
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // CLUBS COLLECTION
    // ==========================================
    match /clubs/{clubId} {
      // Read: Public (all clubs visible)
      allow read: if true;
      
      // Create: Only admins can create clubs
      allow create: if isAdmin() && 
                       isWithinSizeLimit(50000);
      
      // Update: Club owner or admin
      allow update: if (isClubOwner(clubId) || isAdmin()) &&
                       isWithinSizeLimit(50000);
      
      // Delete: Only admins
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // COURTS COLLECTION
    // ==========================================
    match /courts/{courtId} {
      // Read: Public (all courts visible)
      allow read: if true;

      // Create: Club admin/owner or admin (must specify clubId in document)
      allow create: if request.resource.data.clubId is string &&
                       (isClubAdminForClub(request.resource.data.clubId) || isAdmin()) &&
                       isWithinSizeLimit(20000);

      // Update: Club admin/owner or admin (validate club ownership)
      allow update: if (isClubAdminForClub(resource.data.clubId) || isAdmin()) &&
                       isWithinSizeLimit(20000);

      // Delete: Only admins
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // BOOKINGS COLLECTION
    // ==========================================
    match /bookings/{bookingId} {
      // Read: User can read own bookings, club admins can read their club bookings, admins can read all
      allow read: if isOwner(resource.data.userId) ||
                     isClubAdminForClub(resource.data.clubId) ||
                     isAdmin();

      // Create: Authenticated users only, must be own booking, valid timestamp
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       isValidFutureTimestamp(request.resource.data.startTime) &&
                       request.resource.data.status == 'pending' &&
                       isWithinSizeLimit(10000);

      // Update: Owner can update own booking (limited fields), club admin can update status for their club
      allow update: if (isOwner(resource.data.userId) &&
                         request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'notes']) == false) ||
                       (isClubAdminForClub(resource.data.clubId) &&
                         request.resource.data.diff(resource.data).affectedKeys().hasAny(['status']) == true) ||
                       isAdmin();

      // Delete: Owner or admin
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // ==========================================
    // PAYMENTS COLLECTION
    // ==========================================
    match /payments/{paymentId} {
      // Read: User can read own payments, admins can read all
      allow read: if isOwner(resource.data.userId) || isAdmin();
      
      // Create: System only (via Cloud Functions)
      allow create: if false;
      
      // Update: Admins only
      allow update: if isAdmin();
      
      // Delete: Never
      allow delete: if false;
    }
    
    // ==========================================
    // LEAGUES COLLECTION
    // ==========================================
    match /leagues/{leagueId} {
      // Read: Public
      allow read: if true;
      
      // Create: Admins only
      allow create: if isAdmin() && 
                       isWithinSizeLimit(50000);
      
      // Update: Admins only
      allow update: if isAdmin() &&
                       isWithinSizeLimit(50000);
      
      // Delete: Admins only
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // TOURNAMENTS COLLECTION
    // ==========================================
    match /tournaments/{tournamentId} {
      // Read: Public
      allow read: if true;

      // Create: Club admin or admin (must specify clubId)
      allow create: if request.resource.data.clubId is string &&
                       (isClubAdminForClub(request.resource.data.clubId) || isAdmin()) &&
                       isWithinSizeLimit(50000);

      // Update: Club admin or admin (validate club ownership)
      allow update: if (isClubAdminForClub(resource.data.clubId) || isAdmin()) &&
                       isWithinSizeLimit(50000);

      // Delete: Admins only
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // NOTIFICATIONS COLLECTION
    // ==========================================
    match /notifications/{notificationId} {
      // Read: User can read own notifications
      allow read: if isOwner(resource.data.userId);
      
      // Create: System only (via Cloud Functions)
      allow create: if false;
      
      // Update: User can mark as read
      allow update: if isOwner(resource.data.userId) &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      
      // Delete: User can delete own notifications
      allow delete: if isOwner(resource.data.userId);
    }
    
    // ==========================================
    // ANALYTICS COLLECTION (Admin only)
    // ==========================================
    match /analytics/{documentId} {
      allow read: if isAdmin();
      allow write: if false; // Written by Cloud Functions only
    }
    
    // ==========================================
    // AUDIT_LOGS COLLECTION (Admin only)
    // ==========================================
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Written by Cloud Functions only
    }
    
    // ==========================================
    // FEATURE_FLAGS COLLECTION (Admin only)
    // ==========================================
    match /feature_flags/{flagId} {
      allow read: if isAuthenticated(); // All users can read flags
      allow write: if isAdmin(); // Only admins can modify
    }
    
    // ==========================================
    // EXPERIMENTS COLLECTION (Admin only)
    // ==========================================
    match /experiments/{experimentId} {
      allow read: if isAuthenticated(); // All users can read experiments
      allow write: if isAdmin(); // Only admins can modify
    }
    
    // ==========================================
    // DENY ALL OTHER COLLECTIONS
    // ==========================================
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
