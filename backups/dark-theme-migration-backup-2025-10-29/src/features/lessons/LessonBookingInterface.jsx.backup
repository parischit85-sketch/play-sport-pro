// =============================================
// FILE: src/features/lessons/LessonBookingInterface.jsx
// Interface principale per la prenotazione delle lezioni
// =============================================
import React, { useState, useEffect, useMemo, useCallback } from 'react';
import Section from '@ui/Section.jsx';
import Badge from '@ui/Badge.jsx';
import Modal from '@ui/Modal.jsx';
import { createDSClasses } from '@lib/design-system.js';
import { uid } from '@lib/ids.js';
import {
  createLessonBookingSchema,
  createLessonTimeSlotSchema,
  createLessonConfigSchema,
  PLAYER_CATEGORIES,
} from '@features/players/types/playerTypes.js';
import { useLessonBookings } from '@hooks/useUnifiedBookings.js';
import { useAuth } from '@contexts/AuthContext.jsx';
import LessonAdminPanel from './components/LessonAdminPanel.jsx';

export default function LessonBookingInterface({ T, user: propUser, state, setState, clubMode }) {
  const { user } = useAuth();
  const actualUser = user || propUser; // Use context user if available, fallback to prop user
  
  // Use unified lesson booking service
  const {
    lessonBookings,
    loading: lessonLoading,
    createLessonBooking,
    cancelBooking: cancelLessonBooking,
    clearAllLessons,
    refresh: refreshLessons,
  } = useLessonBookings();
  
  const ds = createDSClasses(T);

  // Lesson system state
  const lessonConfig = state?.lessonConfig || createLessonConfigSchema();
  const players = state?.players || [];

  // Note: lessonBookings now comes from the unified service hook above
  // No need to load from localStorage as the unified service handles this

  // UI state
  const [selectedDate, setSelectedDate] = useState('');
  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null); // Fascia oraria
  const [selectedHourlySlot, setSelectedHourlySlot] = useState(null); // Slot di 1 ora
  const [selectedInstructor, setSelectedInstructor] = useState(null);
  const [showBookingModal, setShowBookingModal] = useState(false);
  const [activeTab, setActiveTab] = useState('book'); // 'book' or 'admin'
  const [bookingStep, setBookingStep] = useState(1); // 1: Date, 2: Time Range, 3: Hourly Slot, 4: Instructor, 5: Confirm
  const [message, setMessage] = useState({ type: '', text: '' });

  // Handle lesson cancellation with useCallback
  const handleCancelLesson = useCallback(async (lessonBookingId) => {
    console.log('handleCancelLesson called with:', lessonBookingId);
    if (!confirm('Sei sicuro di voler cancellare questa lezione?')) {
      return;
    }

    try {
      // Find the lesson booking
      const lessonBooking = lessonBookings.find(booking => booking.id === lessonBookingId);
      if (!lessonBooking) {
        console.error('Lesson booking not found');
        return;
      }

      // Cancel the associated court booking if it exists
      if (lessonBooking.courtBookingId) {
        try {
          // First check if the court booking still exists
          const currentBookings = state?.bookings || [];
          const courtBookingExists = currentBookings.some(booking => 
            booking.id === lessonBooking.courtBookingId && booking.status !== 'cancelled'
          );
          
          if (courtBookingExists) {
            await cancelBooking(lessonBooking.courtBookingId, user);
            console.log('✅ Court booking cancelled:', lessonBooking.courtBookingId);
          } else {
            console.log('ℹ️ Court booking not found or already cancelled:', lessonBooking.courtBookingId);
          }
        } catch (error) {
          console.warn('⚠️ Warning: Could not cancel court booking, but continuing with lesson cancellation:', error);
          // Continue anyway - the lesson cancellation should still work
        }
      }

      // Mark lesson booking as cancelled instead of removing it
      const updatedLessonBookings = lessonBookings.map(booking => 
        booking.id === lessonBookingId 
          ? { ...booking, status: 'cancelled', cancelledAt: new Date().toISOString() }
          : booking
      );
      
      setState((prev) => ({
        ...prev,
        lessonBookings: updatedLessonBookings,
        _rev: (prev._rev || 0) + 1,
        _lastBookingUpdate: Date.now(),
      }));

      // Save lesson bookings to localStorage for persistence
      try {
        localStorage.setItem('lessonBookings', JSON.stringify(updatedLessonBookings));
        console.log('💾 Saved updated lesson bookings to localStorage after cancellation');
      } catch (error) {
        console.error('❌ Error saving lesson bookings to localStorage:', error);
      }

      // Also update the court booking in the main bookings array
      if (lessonBooking.courtBookingId) {
        setState((prev) => ({
          ...prev,
          bookings: (prev.bookings || []).map(booking =>
            booking.id === lessonBooking.courtBookingId
              ? { ...booking, status: 'cancelled', cancelledAt: new Date().toISOString() }
              : booking
          )
        }));
      }

      // Emit custom event to refresh other components
      const cancelEvent = new CustomEvent('bookingCancelled', {
        detail: {
          type: 'lesson',
          bookingId: lessonBookingId,
          courtBookingId: lessonBooking.courtBookingId
        }
      });
      window.dispatchEvent(cancelEvent);

      setMessage({ type: 'success', text: 'Lezione cancellata con successo!' });
      
      // Force reload of bookings from service
      try {
        const { getPublicBookings } = await import('@services/bookings.js');
        const publicBookings = await getPublicBookings();
        console.log('🔄 Refreshed bookings after lesson cancellation:', publicBookings?.length || 0);
        
        setState((prevState) => ({
          ...prevState,
          bookings: publicBookings || prevState.bookings,
        }));
      } catch (error) {
        console.error('❌ Error refreshing bookings after cancellation:', error);
      }
      
    } catch (error) {
      console.error('Error cancelling lesson:', error);
      setMessage({ type: 'error', text: 'Errore durante la cancellazione della lezione.' });
    }
  }, [lessonBookings, user, setState]);

  // Clear all test lesson bookings using unified service
  const handleClearAllLessons = useCallback(async () => {
    if (!window.confirm('⚠️ ATTENZIONE: Questa azione cancellerà TUTTE le prenotazioni di lezione e i relativi slot nei campi. Continuare?')) {
      return;
    }

    console.log('🗑️ Clearing all lesson bookings...');
    
    try {
      const cancelledCount = await clearAllLessons();
      console.log(`✅ Cleared ${cancelledCount} lesson bookings successfully`);
      
      setMessage({ type: 'success', text: `Cancellate ${cancelledCount} prenotazioni di lezione con successo!` });
      
      // Clear message after 3 seconds
      setTimeout(() => setMessage({ type: '', text: '' }), 3000);
      
    } catch (error) {
      console.error('❌ Error clearing lesson bookings:', error);
      setMessage({ type: 'error', text: 'Errore durante la cancellazione delle prenotazioni.' });
    }
  }, [clearAllLessons]);

      // Force refresh of booking service
      try {
        const { getPublicBookings } = await import('@services/bookings.js');
        const freshBookings = await getPublicBookings();
        console.log('🔄 Refreshed bookings after clearing all lessons:', freshBookings?.length || 0);
        
        setState((prevState) => ({
          ...prevState,
          bookings: freshBookings || prevState.bookings,
        }));
      } catch (error) {
        console.error('Error refreshing bookings after clearing:', error);
      }

      setMessage({ 
        type: 'success', 
      // Clear message after 3 seconds
      setTimeout(() => setMessage({ type: '', text: '' }), 3000);
      
    } catch (error) {
      console.error('❌ Error clearing lesson bookings:', error);
      setMessage({ type: 'error', text: 'Errore durante la cancellazione delle prenotazioni.' });
    }
  }, [clearAllLessons]);

  // Reset to book tab if user tries to access admin without club mode
  useEffect(() => {
    if (activeTab === 'admin' && !clubMode) {
      setActiveTab('book');
    }
  }, [activeTab, clubMode]);

  // Get instructors from players
  const instructors = useMemo(() => {
    return players.filter(
      (player) =>
        player.category === PLAYER_CATEGORIES.INSTRUCTOR && player.instructorData?.isInstructor
    );
  }, [players]);

  // Get available dates (next 14 days) - only show dates with available slots
  const availableDates = useMemo(() => {
    const dates = [];
    const today = new Date();

    for (let i = 1; i <= lessonConfig.bookingAdvanceDays; i++) {
      const date = new Date(today);
      date.setDate(date.getDate() + i);
      const dayOfWeek = date.getDay();

      // Check if there are active time slots for this day with available courts
      const dayTimeSlots = lessonConfig.timeSlots.filter(
        (slot) =>
          slot.dayOfWeek === dayOfWeek && slot.isActive && slot.courtIds && slot.courtIds.length > 0
      );

      if (dayTimeSlots.length > 0) {
        dates.push({
          value: date.toISOString().split('T')[0],
          label: date.toLocaleDateString('it-IT', {
            weekday: 'short',
            day: 'numeric',
            month: 'short',
          }),
          dayOfWeek: dayOfWeek,
        });
      }
    }

    return dates;
  }, [lessonConfig.timeSlots, lessonConfig.bookingAdvanceDays]);

  // Get available time slots for selected date (fasce orarie)
  const availableTimeSlots = useMemo(() => {
    if (!selectedDate) return [];

    const selectedDateObj = new Date(selectedDate + 'T00:00:00');
    const dayOfWeek = selectedDateObj.getDay();

    console.log('Debug time slots:', {
      selectedDate,
      dayOfWeek,
      allTimeSlots: lessonConfig.timeSlots,
      filteredSlots: lessonConfig.timeSlots.filter(
        (slot) => slot.dayOfWeek === dayOfWeek && slot.isActive
      ),
    });

    return lessonConfig.timeSlots.filter((slot) => slot.dayOfWeek === dayOfWeek && slot.isActive);
  }, [selectedDate, lessonConfig.timeSlots]);

  // Generate 1-hour slots from selected time range
  const generateHourlySlots = (timeSlot) => {
    if (!timeSlot) return [];
    
    const slots = [];
    const startHour = parseInt(timeSlot.startTime.split(':')[0]);
    const endHour = parseInt(timeSlot.endTime.split(':')[0]);
    
    for (let hour = startHour; hour < endHour; hour++) {
      const startTime = `${hour.toString().padStart(2, '0')}:00`;
      const endTime = `${(hour + 1).toString().padStart(2, '0')}:00`;
      
      slots.push({
        id: `${timeSlot.id}_${hour}`,
        startTime,
        endTime,
        parentSlot: timeSlot,
        instructorIds: timeSlot.instructorIds,
        courtIds: timeSlot.courtIds,
        duration: 60
      });
    }
    
    return slots;
  };

  // Get available hourly slots for selected time range
  const availableHourlySlots = useMemo(() => {
    if (!selectedTimeSlot) return [];
    return generateHourlySlots(selectedTimeSlot);
  }, [selectedTimeSlot]);

  // Check if a time slot is available (considering both lessons and court bookings)
  const isTimeSlotAvailable = (timeSlot, instructorId = null, courtId = null) => {
    // Check lesson bookings
    const existingLessonBookings = lessonBookings.filter(
      (booking) =>
        booking.date === selectedDate &&
        booking.timeSlot === `${timeSlot.startTime}-${timeSlot.endTime}` &&
        booking.status !== 'cancelled' &&
        (!instructorId || booking.instructorId === instructorId) &&
        (!courtId || booking.courtId === courtId)
    );

    // If checking for a specific court, also check court bookings
    if (courtId) {
      const courtBookings = state?.bookings || [];
      const existingCourtBookings = courtBookings.filter(
        (booking) =>
          booking.date === selectedDate &&
          booking.courtId === courtId &&
          booking.status !== 'cancelled' &&
          // Check time overlap
          booking.time === timeSlot.startTime // Simplified overlap check
      );

      return (
        existingLessonBookings.length < (timeSlot.maxBookings || timeSlot.parentSlot?.maxBookings || 1) && 
        existingCourtBookings.length === 0
      );
    }

    return existingLessonBookings.length < (timeSlot.maxBookings || timeSlot.parentSlot?.maxBookings || 1);
  };

  // Check if an hourly slot is available for any instructor
  const isHourlySlotAvailable = (hourlySlot) => {
    // Check if at least one instructor is available in this slot
    return hourlySlot.instructorIds.some(instructorId => {
      // Check if instructor is available (no existing bookings)
      const instructorBookings = lessonBookings.filter(
        booking =>
          booking.date === selectedDate &&
          booking.instructorId === instructorId &&
          booking.timeSlot === `${hourlySlot.startTime}-${hourlySlot.endTime}` &&
          booking.status !== 'cancelled'
      );
      
      return instructorBookings.length === 0;
    });
  };

  // Get available courts for a time slot
  const getAvailableCourts = (timeSlot) => {
    if (!timeSlot.courtIds || !state?.courts) return [];

    return state.courts.filter(
      (court) =>
        timeSlot.courtIds.includes(court.id) && isTimeSlotAvailable(timeSlot, null, court.id)
    );
  };

  // Handle lesson booking with automatic court assignment
  const handleBookLesson = async () => {
    try {
      if (!selectedHourlySlot || !selectedInstructor || !selectedDate) {
        console.error('Missing required booking data');
        return;
      }

      // Find first available court for this time slot
      const availableCourts = getAvailableCourts(selectedHourlySlot);
      if (availableCourts.length === 0) {
        console.error('No courts available for this time slot');
        return;
      }
      
      const assignedCourt = availableCourts[0]; // First available court

      const bookingData = {
        date: selectedDate,
        timeSlot: `${selectedHourlySlot.startTime}-${selectedHourlySlot.endTime}`,
        instructorId: selectedInstructor,
        courtId: assignedCourt.id,
        duration: 60, // Fixed 1 hour
        status: 'confirmed'
      };

      // Create lesson booking using unified service
      const lessonData = {
        // Lesson specific data
        instructorId: selectedInstructor,
        instructorName: instructors.find((i) => i.id === selectedInstructor)?.name,
        lessonType: 'individual',
        
        // Court booking data
        courtId: assignedCourt.id,
        courtName: assignedCourt.name,
        date: selectedDate,
        time: selectedHourlySlot.startTime,
        duration: 60,
        
        // Additional data
        price: 0, // Lessons are priced separately
        notes: `Lezione con ${instructors.find((i) => i.id === selectedInstructor)?.name}`,
        players: [actualUser?.displayName || actualUser?.email],
        
        // User data
        userPhone: '',
        bookedBy: actualUser?.displayName || actualUser?.email,
      };

      console.log('Creating unified lesson booking:', lessonData);
      
      // Create both lesson and court bookings through unified service
      const createdLessonBooking = await createLessonBooking(lessonData);
      console.log('✅ Created unified lesson booking:', createdLessonBooking);

      setMessage({ type: 'success', text: 'Lezione prenotata con successo!' });

      // Reset form after successful creation
      setCurrentStep(1);
      setSelectedInstructor('');
      setSelectedDate('');
      setSelectedTime(null);

      // Refresh the lesson bookings data
      await refreshLessons();
      
      // Clear message after 3 seconds
      setTimeout(() => setMessage({ type: '', text: '' }), 3000);
      
    } catch (error) {
      console.error('Error booking lesson:', error);
      setMessage({ type: 'error', text: 'Errore durante la prenotazione della lezione.' });
    }
  };

  // Step navigation helpers
  const nextStep = () => {
    setBookingStep(prev => Math.min(prev + 1, 5));
  };

  const prevStep = () => {
    setBookingStep(prev => Math.max(prev - 1, 1));
  };

  const canProceedToStep = (step) => {
    switch (step) {
      case 2: return selectedDate;
      case 3: return selectedDate && selectedTimeSlot;
      case 4: return selectedDate && selectedTimeSlot && selectedHourlySlot;
      case 5: return selectedDate && selectedTimeSlot && selectedHourlySlot && selectedInstructor;
      default: return true;
    }
  };

  // Get available instructors for selected hourly slot
  const getAvailableInstructors = (hourlySlot) => {
    if (!hourlySlot) return [];
    
    return instructors.filter(instructor => {
      // Check if instructor is configured for this time slot
      const isConfigured = hourlySlot.instructorIds.includes(instructor.id);
      
      // Check if instructor is available (no existing bookings)
      const isAvailable = !lessonBookings.some(booking =>
        booking.date === selectedDate &&
        booking.instructorId === instructor.id &&
        booking.timeSlot === `${hourlySlot.startTime}-${hourlySlot.endTime}` &&
        booking.status !== 'cancelled'
      );
      
      return isConfigured && isAvailable;
    });
  };

  // Reset booking flow
  const resetBookingFlow = () => {
    // Prevent multiple rapid calls
    if (bookingStep === 1 && !selectedDate && !showBookingModal) {
      console.log('🔄 Booking flow already reset, skipping');
      return;
    }
    
    console.log('🔄 Resetting booking flow');
    setSelectedDate('');
    setSelectedTimeSlot(null);
    setSelectedHourlySlot(null);
    setSelectedInstructor(null);
    setBookingStep(1);
    setShowBookingModal(false);
    setMessage({ type: '', text: '' });
  };

  // Update lesson config
  const updateLessonConfig = (newConfig) => {
    setState((prev) => ({
      ...prev,
      lessonConfig: newConfig,
    }));
  };

  if (!lessonConfig.isEnabled && activeTab !== 'admin') {
    return (
      <div className="text-center py-12">
        <div className={`${T.cardBg} ${T.border} ${T.borderMd} p-8 max-w-md mx-auto`}>
          <h2 className={`${ds.h4} mb-4`}>Sistema Lezioni Non Attivo</h2>
          <p className={`${ds.body} ${T.subtext} mb-4`}>
            Il sistema di prenotazione lezioni non è ancora stato configurato.
          </p>
          {clubMode && (
            <button
              onClick={() => {
                console.log('Clicking Configura Sistema Lezioni button - switching to admin tab');
                setActiveTab('admin');
              }}
              className={`${ds.button} bg-blue-600 text-white px-4 py-2`}
            >
              Configura Sistema Lezioni
            </button>
          )}
          {!clubMode && (
            <p className={`text-sm ${T.subtext} mt-4`}>
              Contatta l'amministratore del circolo per attivare il servizio.
            </p>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className={`${ds.h3} mb-2`}>Prenota Lezione</h1>
        <p className={`${ds.body} ${T.subtext}`}>
          Prenota una lezione con un istruttore qualificato
        </p>
      </div>

      {/* Message */}
      {message.text && (
        <div
          className={`p-4 rounded-lg ${
            message.type === 'success'
              ? 'bg-green-50 text-green-800 border border-green-200'
              : 'bg-red-50 text-red-800 border border-red-200'
          }`}
        >
          {message.text}
        </div>
      )}

      {/* Tab Navigation */}
      {clubMode && (
        <div className="border-b border-gray-200">
          <nav className="flex space-x-8">
            {[
              { id: 'book', label: 'Prenota Lezione', icon: '📚' },
              { id: 'admin', label: 'Amministrazione', icon: '⚙️' },
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`py-2 px-1 border-b-2 font-medium text-sm whitespace-nowrap ${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <span className="text-base mr-1">{tab.icon}</span>
                {tab.label}
              </button>
            ))}
          </nav>
        </div>
      )}

      {/* Content */}
      {activeTab === 'book' ? (
        <div className="space-y-6">
          {/* Available Instructors */}
          {instructors.length > 0 && (
            <Section title="Istruttori Disponibili" variant="minimal" T={T}>
              <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
                {instructors.map((instructor) => (
                  <div
                    key={instructor.id}
                    className={`${T.cardBg} ${T.border} ${T.borderMd} p-4 hover:shadow-md transition-shadow`}
                  >
                    <div className="flex items-center gap-3 mb-3">
                      <div
                        className="w-8 h-8 rounded-full flex items-center justify-center text-white font-bold"
                        style={{ backgroundColor: instructor.instructorData?.color }}
                      >
                        {instructor.name?.charAt(0) || '?'}
                      </div>
                      <div>
                        <h3 className={`${ds.h6} font-medium`}>{instructor.name}</h3>
                        <p className={`text-sm ${T.subtext}`}>Istruttore</p>
                      </div>
                    </div>

                    {instructor.instructorData?.specialties?.length > 0 && (
                      <div className="flex flex-wrap gap-1 mb-3">
                        {instructor.instructorData.specialties.map((specialty, idx) => (
                          <Badge key={idx} variant="default" size="xs" T={T}>
                            {specialty}
                          </Badge>
                        ))}
                      </div>
                    )}

                    {instructor.instructorData?.hourlyRate > 0 && (
                      <div className="text-sm font-medium text-green-600 mb-3">
                        €{instructor.instructorData.hourlyRate}/ora
                      </div>
                    )}

                    {instructor.instructorData?.bio && (
                      <p className={`text-sm ${T.subtext} mb-3`}>{instructor.instructorData.bio}</p>
                    )}
                  </div>
                ))}
              </div>
            </Section>
          )}

          {/* Step-by-step Booking Process */}
          <Section title="Prenota Lezione" variant="minimal" T={T}>
            {/* Progress Indicator */}
            <div className="mb-6">
              <div className="flex items-center justify-between">
                {[
                  { step: 1, label: "Data", icon: "📅" },
                  { step: 2, label: "Fascia", icon: "⏰" },
                  { step: 3, label: "Orario", icon: "🕐" },
                  { step: 4, label: "Istruttore", icon: "👨‍🏫" },
                  { step: 5, label: "Conferma", icon: "✅" }
                ].map((item, index) => (
                  <div key={item.step} className="flex items-center">
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                      bookingStep >= item.step 
                        ? 'bg-blue-500 text-white' 
                        : 'bg-gray-200 text-gray-600'
                    }`}>
                      {bookingStep > item.step ? "✓" : item.step}
                    </div>
                    <span className={`ml-2 text-sm ${bookingStep >= item.step ? 'text-blue-600 font-medium' : 'text-gray-500'}`}>
                      {item.label}
                    </span>
                    {index < 4 && <div className={`flex-1 h-0.5 mx-2 ${bookingStep > item.step ? 'bg-blue-500' : 'bg-gray-200'}`} />}
                  </div>
                ))}
              </div>
            </div>

            {/* Step 1: Date Selection */}
            {bookingStep === 1 && (
              <div className="space-y-4">
                <h3 className="text-lg font-medium">Seleziona la data</h3>
                <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-2">
                  {availableDates.map((date) => (
                    <button
                      key={date.value}
                      onClick={() => {
                        setSelectedDate(date.value);
                        // Reset subsequent selections when date changes
                        setSelectedTimeSlot(null);
                        setSelectedHourlySlot(null);
                        setSelectedInstructor(null);
                        nextStep();
                      }}
                      className={`p-3 rounded-lg border text-center transition-all ${
                        selectedDate === date.value
                          ? 'bg-blue-100 text-blue-800 border-blue-300 shadow-sm font-medium'
                          : `${T.cardBg} ${T.border} hover:bg-gray-50`
                      }`}
                    >
                      <div className="text-sm font-medium">{date.label}</div>
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* Step 2: Time Range Selection */}
            {bookingStep === 2 && availableTimeSlots.length > 0 && (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-medium">Seleziona la fascia oraria per {availableDates.find(d => d.value === selectedDate)?.label}</h3>
                  <button onClick={prevStep} className="text-sm text-blue-600 hover:text-blue-800">← Indietro</button>
                </div>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
                  {availableTimeSlots.map((slot) => (
                    <button
                      key={slot.id}
                      onClick={() => {
                        setSelectedTimeSlot(slot);
                        // Reset subsequent selections when time slot changes
                        setSelectedHourlySlot(null);
                        setSelectedInstructor(null);
                        nextStep();
                      }}
                      className={`p-4 rounded-lg border text-left transition-all ${
                        selectedTimeSlot?.id === slot.id
                          ? 'bg-green-100 text-green-800 border-green-300 shadow-sm'
                          : `${T.cardBg} ${T.border} hover:bg-gray-50`
                      }`}
                    >
                      <div className="font-medium text-base">
                        {slot.startTime} - {slot.endTime}
                      </div>
                      <div className="text-sm text-gray-600 mt-1">
                        {slot.instructorIds.length} istruttori disponibili
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* Step 3: Hourly Slot Selection */}
            {bookingStep === 3 && selectedTimeSlot && (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-medium">Seleziona l'orario specifico ({selectedTimeSlot.startTime} - {selectedTimeSlot.endTime})</h3>
                  <button onClick={prevStep} className="text-sm text-blue-600 hover:text-blue-800">← Indietro</button>
                </div>
                <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-2">
                  {availableHourlySlots.map((hourlySlot) => {
                    const available = isHourlySlotAvailable(hourlySlot);
                    return (
                      <button
                        key={hourlySlot.id}
                        onClick={() => available && (
                          setSelectedHourlySlot(hourlySlot), 
                          setSelectedInstructor(null), // Reset instructor when slot changes
                          nextStep()
                        )}
                        disabled={!available}
                        className={`p-3 rounded-lg border text-center transition-all ${
                          selectedHourlySlot?.id === hourlySlot.id
                            ? 'bg-blue-100 text-blue-800 border-blue-300 shadow-sm font-medium'
                            : available
                              ? `${T.cardBg} ${T.border} hover:bg-gray-50`
                              : 'bg-gray-50 text-gray-400 border-gray-200 cursor-not-allowed'
                        }`}
                      >
                        <div className="text-sm font-medium">
                          {hourlySlot.startTime} - {hourlySlot.endTime}
                        </div>
                        <div className="text-xs mt-1">
                          {available ? 'Disponibile' : 'Non disponibile'}
                        </div>
                      </button>
                    );
                  })}
                </div>
              </div>
            )}

            {/* Step 4: Instructor Selection */}
            {bookingStep === 4 && selectedHourlySlot && (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-medium">Seleziona l'istruttore ({selectedHourlySlot.startTime} - {selectedHourlySlot.endTime})</h3>
                  <button onClick={prevStep} className="text-sm text-blue-600 hover:text-blue-800">← Indietro</button>
                </div>
                <div className="grid gap-3 sm:grid-cols-2">
                  {getAvailableInstructors(selectedHourlySlot).map((instructor) => (
                    <button
                      key={instructor.id}
                      onClick={() => {
                        setSelectedInstructor(instructor.id);
                        nextStep();
                      }}
                      className={`${T.cardBg} ${T.border} ${T.borderMd} p-4 text-left hover:shadow-md transition-shadow ${
                        selectedInstructor === instructor.id ? 'ring-2 ring-blue-500' : ''
                      }`}
                    >
                      <div className="flex items-center gap-3">
                        <div
                          className="w-10 h-10 rounded-full flex items-center justify-center text-white font-bold"
                          style={{ backgroundColor: instructor.instructorData?.color }}
                        >
                          {instructor.name?.charAt(0) || '?'}
                        </div>
                        <div className="flex-1">
                          <h4 className="font-medium">{instructor.name}</h4>
                          <p className="text-sm text-gray-600">Istruttore disponibile</p>
                        </div>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* Step 5: Confirmation */}
            {bookingStep === 5 && selectedInstructor && (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-medium">Conferma prenotazione</h3>
                  <button onClick={prevStep} className="text-sm text-blue-600 hover:text-blue-800">← Indietro</button>
                </div>
                
                <div className={`${T.cardBg} ${T.border} ${T.borderMd} p-6 rounded-lg`}>
                  <h4 className="font-medium mb-4">Riepilogo prenotazione:</h4>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Data:</span>
                      <span className="font-medium">{availableDates.find(d => d.value === selectedDate)?.label}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Orario:</span>
                      <span className="font-medium">{selectedHourlySlot.startTime} - {selectedHourlySlot.endTime}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Istruttore:</span>
                      <span className="font-medium">{instructors.find(i => i.id === selectedInstructor)?.name}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Campo:</span>
                      <span className="font-medium">Assegnato automaticamente</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Durata:</span>
                      <span className="font-medium">1 ora</span>
                    </div>
                  </div>
                  
                  <div className="flex gap-3 mt-6">
                    <button
                      onClick={resetBookingFlow}
                      className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                    >
                      Cancella
                    </button>
                    <button
                      onClick={handleBookLesson}
                      className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                    >
                      Conferma Prenotazione
                    </button>
                  </div>
                </div>
              </div>
            )}
          </Section>

          {/* User's Lesson Bookings */}
          {user && (
            <Section title="Le Tue Lezioni" variant="minimal" T={T}>
              <UserLessonBookings
                lessonBookings={lessonBookings}
                instructors={instructors}
                courts={state?.courts || []}
                user={user}
                T={T}
                ds={ds}
                onCancelLesson={handleCancelLesson}
              />
            </Section>
          )}
        </div>
      ) : activeTab === 'admin' && clubMode ? (
        <LessonAdminPanel
          T={T}
          ds={ds}
          lessonConfig={lessonConfig}
          updateLessonConfig={updateLessonConfig}
          instructors={instructors}
          players={players}
          setState={setState}
          state={state}
          courts={state?.courts || []}
          onClearAllLessons={handleClearAllLessons}
          lessonBookingsCount={lessonBookings?.length || 0}
        />
      ) : activeTab === 'admin' && !clubMode ? (
        <div className="text-center py-12">
          <div className={`${T.cardBg} ${T.border} ${T.borderMd} p-8 max-w-md mx-auto`}>
            <h2 className={`${ds.h4} mb-4 text-red-600`}>Accesso Negato</h2>
            <p className={`${ds.body} ${T.subtext} mb-4`}>
              Non hai i permessi per accedere al pannello di amministrazione.
            </p>
            <button
              onClick={() => setActiveTab('book')}
              className={`${ds.button} bg-blue-600 text-white px-4 py-2`}
            >
              Torna alle Prenotazioni
            </button>
          </div>
        </div>
      ) : (
        <div className="text-center py-12">
          <div className={`${T.cardBg} ${T.border} ${T.borderMd} p-8 max-w-md mx-auto`}>
            <h2 className={`${ds.h4} mb-4`}>Errore</h2>
            <p className={`${ds.body} ${T.subtext} mb-4`}>
              Stato non valido. Per favore ricarica la pagina.
            </p>
          </div>
        </div>
      )}
    </div>
  );
}

// Component for user's lesson bookings
function UserLessonBookings({ lessonBookings, instructors, courts, user, T, ds, onCancelLesson }) {
  const userBookings = lessonBookings.filter(
    (booking) => 
      (booking.studentId === user?.id || booking.studentId === user?.email) &&
      booking.status !== 'cancelled' // Don't show cancelled lessons
  );

  if (userBookings.length === 0) {
    return (
      <p className={`${T.subtext} text-center py-8`}>Non hai ancora prenotato nessuna lezione</p>
    );
  }

  return (
    <div className="space-y-3">
      {userBookings.map((booking) => {
        const instructor = instructors.find((i) => i.id === booking.instructorId);
        const court = courts.find((c) => c.id === booking.courtId);
        const isUpcoming =
          new Date(`${booking.date}T${booking.timeSlot.split('-')[0]}:00`) > new Date();

        return (
          <div key={booking.id} className={`${T.cardBg} ${T.border} ${T.borderMd} p-4`}>
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <div className="flex items-center gap-3 mb-2">
                  {instructor && (
                    <div
                      className="w-8 h-8 rounded-full flex items-center justify-center text-white font-bold text-sm"
                      style={{ backgroundColor: instructor.instructorData?.color }}
                    >
                      {instructor.name?.charAt(0) || '?'}
                    </div>
                  )}
                  <div>
                    <h4 className={`${ds.h6} font-medium`}>
                      Lezione con {instructor?.name || 'Istruttore'}
                    </h4>
                    <p className={`text-sm ${T.subtext}`}>
                      {new Date(booking.date).toLocaleDateString('it-IT')} • {booking.timeSlot}
                    </p>
                  </div>
                </div>

                <div className="flex items-center gap-4 text-sm">
                  <span className={`${T.subtext}`}>📍 {court?.name || 'Campo'}</span>
                  <span className={`${T.subtext}`}>⏱️ {booking.duration} min</span>
                  {booking.price > 0 && (
                    <span className="font-medium text-green-600">€{booking.price}</span>
                  )}
                </div>
              </div>

              <div className="flex flex-col items-end gap-2">
                <Badge
                  variant={booking.status === 'confirmed' ? 'success' : 'default'}
                  size="sm"
                  T={T}
                >
                  {booking.status === 'confirmed'
                    ? 'Confermata'
                    : booking.status === 'completed'
                      ? 'Completata'
                      : booking.status === 'cancelled'
                        ? 'Annullata'
                        : 'Pending'}
                </Badge>

                {isUpcoming && booking.status === 'confirmed' && (
                  <button
                    className="text-xs text-red-600 hover:text-red-700"
                    onClick={() => {
                      if (typeof onCancelLesson === 'function') {
                        onCancelLesson(booking.id);
                      } else {
                        console.error('onCancelLesson is not a function!');
                      }
                    }}
                  >
                    Cancella
                  </button>
                )}
              </div>
            </div>

            {booking.notes && (
              <div className={`mt-3 pt-3 border-t ${T.border} text-sm ${T.subtext}`}>
                {booking.notes}
              </div>
            )}
          </div>
        );
      })}
    </div>
  );
}

// Booking confirmation modal
function LessonBookingModal({
  isOpen,
  onClose,
  instructor,
  timeSlot,
  date,
  courts,
  onConfirm,
  T,
  ds,
}) {
  const [selectedCourt, setSelectedCourt] = useState('');
  const [notes, setNotes] = useState('');
  const [duration, setDuration] = useState(60);

  const handleConfirm = () => {
    if (!selectedCourt) {
      alert('Seleziona un campo per la lezione');
      return;
    }

    const bookingData = {
      instructorId: instructor.id,
      courtId: selectedCourt,
      date: date,
      timeSlot: `${timeSlot.startTime}-${timeSlot.endTime}`,
      duration: duration,
      price: instructor.instructorData?.hourlyRate * (duration / 60) || 0,
      notes: notes,
    };

    onConfirm(bookingData);
  };

  console.log('About to return main component, handleCancelLesson type:', typeof handleCancelLesson);

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title="Conferma Prenotazione Lezione"
      size="medium"
      T={T}
    >
      <div className="space-y-4">
        {/* Lesson Details */}
        <div className={`${T.cardBg} p-4 rounded-lg border`}>
          <h3 className={`${ds.h6} font-medium mb-3`}>Dettagli Lezione</h3>

          <div className="flex items-center gap-3 mb-3">
            <div
              className="w-10 h-10 rounded-full flex items-center justify-center text-white font-bold"
              style={{ backgroundColor: instructor.instructorData?.color }}
            >
              {instructor.name?.charAt(0) || '?'}
            </div>
            <div>
              <p className={`font-medium ${T.text}`}>{instructor.name}</p>
              <p className={`text-sm ${T.subtext}`}>
                {new Date(date).toLocaleDateString('it-IT')} • {timeSlot.startTime} -{' '}
                {timeSlot.endTime}
              </p>
            </div>
          </div>

          {instructor.instructorData?.hourlyRate > 0 && (
            <p className="text-green-600 font-medium">
              Tariffa: €{instructor.instructorData.hourlyRate}/ora
            </p>
          )}
        </div>

        {/* Court Selection */}
        <div>
          <label className={`block ${ds.label} mb-2`}>Seleziona Campo *</label>
          <select
            value={selectedCourt}
            onChange={(e) => setSelectedCourt(e.target.value)}
            className={`w-full p-2 ${T.cardBg} ${T.border} ${T.borderMd} focus:outline-none focus:ring-2 focus:ring-blue-500`}
          >
            <option value="">-- Seleziona Campo --</option>
            {courts.map((court) => (
              <option key={court.id} value={court.id}>
                {court.name}
              </option>
            ))}
          </select>
        </div>

        {/* Duration Selection */}
        <div>
          <label className={`block ${ds.label} mb-2`}>Durata Lezione</label>
          <select
            value={duration}
            onChange={(e) => setDuration(parseInt(e.target.value))}
            className={`w-full p-2 ${T.cardBg} ${T.border} ${T.borderMd} focus:outline-none focus:ring-2 focus:ring-blue-500`}
          >
            <option value={60}>60 minuti</option>
            <option value={90}>90 minuti</option>
          </select>
        </div>

        {/* Notes */}
        <div>
          <label className={`block ${ds.label} mb-2`}>Note (opzionale)</label>
          <textarea
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            rows={3}
            className={`w-full p-2 ${T.cardBg} ${T.border} ${T.borderMd} focus:outline-none focus:ring-2 focus:ring-blue-500`}
            placeholder="Aggiungi note per l'istruttore..."
          />
        </div>

        {/* Price Summary */}
        {instructor.instructorData?.hourlyRate > 0 && (
          <div className={`${T.cardBg} p-4 rounded-lg border`}>
            <div className="flex justify-between items-center">
              <span className={ds.body}>Totale:</span>
              <span className={`${ds.h6} font-bold text-green-600`}>
                €{(instructor.instructorData.hourlyRate * (duration / 60)).toFixed(2)}
              </span>
            </div>
          </div>
        )}

        {/* Actions */}
        <div className="flex gap-3 pt-4">
          <button
            onClick={onClose}
            className={`flex-1 py-2 px-4 ${T.cardBg} ${T.border} ${T.borderMd} hover:bg-gray-50 transition-colors`}
          >
            Cancella
          </button>
          <button
            onClick={handleConfirm}
            className={`flex-1 py-2 px-4 bg-blue-600 text-white hover:bg-blue-700 transition-colors`}
          >
            Conferma Prenotazione
          </button>
        </div>
      </div>
    </Modal>
  );
}
